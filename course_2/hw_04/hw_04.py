from functools import reduce
from itertools import count, cycle


# 2.
# Представлен список чисел. Необходимо вывести элементы исходного
# списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.
# Пример исходного списка:
# [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

def get_filtered_list(input_list):
    return [el for idx, el in enumerate(input_list) if idx != 0 and input_list[idx - 1] < el]


# 3.
# Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

def get_multiples_nums(from_num, to_num, *mult_conditions):
    return [num for num in range(from_num, to_num + 1) for cond in mult_conditions if not num % cond]


# 4.
# Представлен список чисел. Определить элементы списка, не имеющие
# повторений. Сформировать итоговый массив чисел, соответствующих
# требованию. Элементы вывести в порядке их следования в исходном
# списке. Для выполнения задания обязательно использовать генератор.
# Пример исходного списка:
# [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

def get_unique_elements(input_list):
    return [el for el in input_list if input_list.count(el) == 1]


# 5.
# Реализовать формирование списка, используя функцию range() и
# возможности генератора. В список должны войти четные числа от 100 до
# 1000 (включая границы). Необходимо получить результат вычисления
# произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

def get_list_from_range(from_num, to_num):
    return list(range(from_num, to_num + 1))


def get_sum_of_list_els(input_list):
    return reduce(lambda x, y: x + y, input_list)


# 6.
# Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного
# заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при
# достижении числа 10 завершаем цикл. Во втором также необходимо
# предусмотреть условие, при котором повторение элементов списка будет
# прекращено.

def get_int_sequence(from_num, to_num):
    for el in count(from_num):
        if el > to_num:
            break
        yield el


def get_list_el_iterator(input_list, qty):
    stop_flag = len(input_list) * qty
    for idx, el in enumerate(cycle(input_list), 1):
        if idx > stop_flag:
            break
        yield el


# 7.
# Реализовать генератор с помощью функции с ключевым словом yield,
# создающим очередное значение. При вызове функции должен создаваться
# объект-генератор. Функция должна вызываться следующим образом:
# for el in fact(n). Функция отвечает за получение факториала числа, а в
# цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например,
# факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fact(n):
    res = 1
    for num in range(1, n + 1):
        res *= num
        yield res


if __name__ == '__main__':
    print('******************** Результат выполнения задания №2 ********************')
    print(get_filtered_list([300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]))

    print('******************** Результат выполнения задания №3 ********************')
    print(get_multiples_nums(20, 240, 20, 21))

    print('******************** Результат выполнения задания №4 ********************')
    print(get_unique_elements([2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]))

    print('******************** Результат выполнения задания №5 ********************')
    print(get_sum_of_list_els(get_list_from_range(100, 1000)))

    print('******************** Результат выполнения задания №6 ********************')
    print('******************** a) ********************')
    for i in get_int_sequence(5, 10):
        print(i)

    print('******************** б) ********************')
    for el in get_list_el_iterator(['list el #1', 'list el #2'], 5):
        print(el)

    print('******************** Результат выполнения задания №7 ********************')
    for el in fact(4):
        print(el)
