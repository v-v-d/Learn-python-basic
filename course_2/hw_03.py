# Реализовать функцию, принимающую два числа (позиционные аргументы)
# и выполняющую их деление. Числа запрашивать у пользователя,
# предусмотреть обработку ситуации деления на ноль.


def make_division(num1, num2):
    try:
        return num1 / num2
    except ZeroDivisionError:
        return 'На ноль делить нельзя'

# Реализовать функцию, принимающую несколько параметров, описывающих
# данные пользователя: имя, фамилия, год рождения, город проживания,
# email, телефон. Функция должна принимать параметры как именованные
# аргументы. Реализовать вывод данных о пользователе одной строкой.


def get_user_info(name=None, last_name=None, year=None, city=None, email=None, phone=None):
    return f'name: {name}, last name: {last_name}, year: {year}, city: {city}, email: {email}, phone: {phone}'


# Реализовать функцию my_func(), которая принимает три позиционных
# аргумента, и возвращает сумму наибольших двух аргументов.


def get_max_sum(num1, num2, num3):
    return max(num1 + num2, num2 + num3, num1 + num3)


# Программа принимает действительное положительное число x и целое
# отрицательное число y. Необходимо выполнить возведение числа x в
# степень y. Задание необходимо реализовать в виде функции
# my_func(x, y). При решении задания необходимо обойтись без
# встроенной функции возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами. Первый —
# возведение в степень с помощью оператора **. Второй — более
# сложная реализация без оператора **, предусматривающая
# использование цикла.


def raise_to_the_power_1(num1, num2):
    return num1 ** num2


def raise_to_the_power_2(num1, num2):
    result = num1
    for _ in range(1, num2):
        result *= num1
    return result


# Программа запрашивает у пользователя строку чисел, разделенных
# пробелом. При нажатии Enter должна выводиться сумма чисел.
# Пользователь может продолжить ввод чисел, разделенных пробелом и
# снова нажать Enter. Сумма вновь введенных чисел будет добавляться
# к уже подсчитанной сумме. Но если вместо числа вводится
# специальный символ, выполнение программы завершается. Если
# специальный символ введен после нескольких чисел, то вначале нужно
# добавить сумму этих чисел к полученной ранее сумме и после этого
# завершить программу.


def get_sum_from_str(quit_symbol='q'):
    summ = 0
    is_quit = False

    while True:
        symbol_list = input(f'Введите числа через пробел. (Для выхода введите "{quit_symbol}"): ').split()

        for symbols in symbol_list:
            if symbols == quit_symbol:
                is_quit = True
                break
            try:
                num = int(symbols)
            except ValueError:
                print(f'Ошибка! Необходимо вводить только числа или "{quit_symbol}". Вы ввели: {symbols}')
            else:
                summ += num

        if is_quit:
            break

    return summ


# Реализовать функцию int_func(), принимающую слово из маленьких
# латинских букв и возвращающую его же, но с прописной первой буквой.
# Например, print(int_func(‘text’)) -> Text.
# Продолжить работу над заданием. В программу должна попадать строка
# из слов, разделенных пробелом. Каждое слово состоит из латинских
# букв в нижнем регистре. Сделать вывод исходной строки, но каждое
# слово должно начинаться с заглавной буквы. Необходимо использовать
# написанную ранее функцию int_func().


def make_capitalize_word(word):
    return word.capitalize()


def make_capitalize_words(words):
    result = str()
    for word in words.split():
        result += f'{make_capitalize_word(word)} '

    return result


if __name__ == '__main__':
    print('*************** Результат выполнения задания №1 ***************')
    print(make_division(2, 4))
    print(make_division(2, 0))

    print('*************** Результат выполнения задания №2 ***************')
    print(get_user_info(
        name='Ivan',
        last_name='Ivanov',
        year=1990,
        city='Moscow',
        email='ivan_ivanov@mail.ru',
        phone='+79263332211'
    ))

    print('*************** Результат выполнения задания №3 ***************')
    print(get_max_sum(2, 4, 6))

    print('*************** Результат выполнения задания №4 ***************')
    print(raise_to_the_power_1(2, 3))
    print(raise_to_the_power_2(2, 3))

    print('*************** Результат выполнения задания №5 ***************')
    print(get_sum_from_str())

    print('*************** Результат выполнения задания №6 ***************')
    print(make_capitalize_word('word'))
    print(make_capitalize_words('make capitalize words'))
